<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Code4Cocoa</title>
  <subtitle>A Programer&#39;s Home</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://code4cocoa.com/"/>
  <updated>2018-03-28T14:34:48.829Z</updated>
  <id>http://code4cocoa.com/</id>
  
  <author>
    <name>YuxiangQ</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>未完的4.0</title>
    <link href="http://code4cocoa.com/2018/03/28/%E6%9C%AA%E5%AE%8C%E7%9A%844-0/"/>
    <id>http://code4cocoa.com/2018/03/28/未完的4-0/</id>
    <published>2018-03-28T14:33:59.000Z</published>
    <updated>2018-03-28T14:34:48.829Z</updated>
    
    <content type="html"><![CDATA[<p>想说些什么，却又不知从何说起。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;想说些什么，却又不知从何说起。&lt;/p&gt;

    
    </summary>
    
    
      <category term="随笔" scheme="http://code4cocoa.com/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>PMP备考感悟</title>
    <link href="http://code4cocoa.com/2017/12/28/PMP%E5%A4%87%E8%80%83%E6%84%9F%E6%82%9F/"/>
    <id>http://code4cocoa.com/2017/12/28/PMP备考感悟/</id>
    <published>2017-12-28T07:06:55.000Z</published>
    <updated>2017-12-29T03:28:33.847Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/media/default.jpeg" alt="default"><br>今天知道了PMP的考试成绩，我很幸运的拿了5A，这也是对我三个多月来的备考付出最好的回报。</p>
<p>其实刚开始拿到PMBOK的时候，确实心里『咯噔』了那么一下。那么厚的一本书，看起来很吃力啊。不过随着学习的深入和余老师的引导，慢慢的我对整个PMBOK的知识结构有了一定的认识，书也就不那么厚了。</p>
<p>我的备考经验简单总结起来就是做好三件事：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">一、课前预习，在上课之前认真看几遍书真的是很重要的，至于具体几遍，我认为可以根据个人阅读习惯和掌握情况调整。课前的预习能让我们对书中的『术语』『概念』有大致的印象，有助于老师在讲课的时候，我们能跟上老师的思路，加深影响。同时也可以关联自己平时的工作场景，强化记忆。课前预习阶段看书PMBOK就好，不建议预习完就去刷题，或是看之外的参考书，这样容易误导我们的思想，毕竟PMBOK才是根本。</div><div class="line"></div><div class="line">二、课中认真听讲，仔细在书上做好笔记。课堂上的强度还是蛮大的，尤其是下午，人困马乏之际，更是要打起精神，听清楚老师讲的每一个『考点』。课上没听懂的，在书上做好标记，课间的时候可以向老师请教。一定要尽量在课堂上搞懂，不然后期刷题的时候会让自己很慌张。</div><div class="line"></div><div class="line">三、课后认真做题，积极参加小组讨论。课后测试题是一定要认真做的，它能帮助我们尽快熟悉PMP考试的套路。个人建议是单独准备『答题卡』做题，不要直接在测试题上标注，这样冲刺阶段的时候还能将测试题拿出来重做。学习小组也是非常重要的，大家一定要积极参加自己所在小组的活动。毕竟PMP考试并没有『标准答案』，而是相对『合适的答案』，所以大家针对答案的讨论真的非常重要，可以了解到更多的解题思路。清晖QQ群里面发的每日一题，也是要认真对待的，可以记下来冲刺阶段再看看。</div></pre></td></tr></table></figure>
<p>做好以上三点，我相信通过考试是没有问题的。另外在最后的冲刺阶段，以清晖发的试题为准就行了，不用去网上找题库什么的，那没有什么意义的。题在于精而不在于多，深刻理解每道题的考点才是关键。也不要钻牛角尖，纠结于对错，毕竟外国人的思维方式、处事风格和我们还是有一定差异的。</p>
<p>在此感谢清晖余老师、谭老师三个月的陪伴，祝往后的学弟、学妹们都能取得好成绩。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/media/default.jpeg&quot; alt=&quot;default&quot;&gt;&lt;br&gt;今天知道了PMP的考试成绩，我很幸运的拿了5A，这也是对我三个多月来的备考付出最好的回报。&lt;/p&gt;
&lt;p&gt;其实刚开始拿到PMBOK的时候，确实心里『咯噔』了那么一下。那么厚的一
    
    </summary>
    
    
      <category term="随笔" scheme="http://code4cocoa.com/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>PMP第二周培训</title>
    <link href="http://code4cocoa.com/2017/10/29/PMP%E7%AC%AC%E4%BA%8C%E5%91%A8%E5%9F%B9%E8%AE%AD/"/>
    <id>http://code4cocoa.com/2017/10/29/PMP第二周培训/</id>
    <published>2017-10-29T11:15:14.000Z</published>
    <updated>2017-11-04T14:58:36.042Z</updated>
    
    <content type="html"><![CDATA[<p>这周的培训强度有点大，两天都晕晕乎乎，特别是涉及复杂的计算题。到课程最后就是机械的记录了，脑袋已经不动了。(发现馥芮白的咖啡含量果然比拿铁高，第一天下午为了不打瞌睡，喝了个大杯馥芮白，结果心脏跳得很厉害，课后回家觉得很乏，但就是睡不着。第二天喝的拿铁，就没有心跳加速那种感觉)</p>
<p>这周重点讲了以下方面：</p>
<ul>
<li>项目成本管理</li>
<li>项目质量管理</li>
<li>项目人力资源管理</li>
<li>项目沟通管理</li>
<li>项目风险管理</li>
<li>项目干系人管理</li>
</ul>
<p>其中<strong>项目成本管理</strong>中的<strong>挣值管理（EVM）</strong>作为有大量计算题的一个知识点，确实给大家带来了不小的困扰。</p>
<p>第一个难点在于有好几个需要记住的缩写，比如：</p>
<figure class="highlight arduino"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">EV，挣值</div><div class="line">PV，计划价值</div><div class="line">AC，实际成本</div><div class="line">SV，进度偏差</div><div class="line">CV，成本偏差</div><div class="line"><span class="built_in">SPI</span>，进度绩效指数</div><div class="line">CPI，成本绩效指数</div><div class="line">BAC，完工预算</div><div class="line">EAC，完工估算</div><div class="line">ETC，完工尚需估算</div><div class="line">TCPI，完工尚需绩效指数</div><div class="line">VAC，完工偏差</div></pre></td></tr></table></figure>
<p>以上缩写和名词可能看单个的时候还是挺容易理解的，但是当糅杂在一起的时候，就很容易记混了。<br>再配上它们之间复杂的公式，比如：</p>
<figure class="highlight ini"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="attr">SV</span> = EV - PV</div><div class="line"><span class="attr">SPI</span> = EV / PV</div><div class="line"><span class="attr">CV</span> = EV - AC</div><div class="line"><span class="attr">CPI</span> = EV / AC</div><div class="line"><span class="attr">ETC</span> = (BAC - EV) / CPI</div><div class="line"><span class="attr">ETC</span> = BAC - EV</div><div class="line"><span class="attr">ETC</span> = (BAC - EV) / (CPI * SPI)</div><div class="line"><span class="attr">EAC</span> = AC + ETC</div></pre></td></tr></table></figure>
<p>脑袋已晕😓😓😓。</p>
<p><strong>质量管理</strong>和<strong>风险管理</strong>的考点也蛮多了，<strong>控制质量</strong>中的七种工具等知识也是需要牢牢记住的。</p>
<p>课堂上也公布了上周测试题的答案，30到题错了9道，勉强及格。其中有2，3道题属于自己疏忽了，被题干欺骗，看来还没有熟悉考题套路，希望随着做题的增多，自己能对题目套路更熟悉。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这周的培训强度有点大，两天都晕晕乎乎，特别是涉及复杂的计算题。到课程最后就是机械的记录了，脑袋已经不动了。(发现馥芮白的咖啡含量果然比拿铁高，第一天下午为了不打瞌睡，喝了个大杯馥芮白，结果心脏跳得很厉害，课后回家觉得很乏，但就是睡不着。第二天喝的拿铁，就没有心跳加速那种感觉
    
    </summary>
    
    
      <category term="随笔" scheme="http://code4cocoa.com/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>PMP第一周培训</title>
    <link href="http://code4cocoa.com/2017/10/20/PMP%E7%AC%AC%E4%B8%80%E5%91%A8%E5%9F%B9%E8%AE%AD/"/>
    <id>http://code4cocoa.com/2017/10/20/PMP第一周培训/</id>
    <published>2017-10-20T13:26:41.000Z</published>
    <updated>2017-10-24T13:06:18.830Z</updated>
    
    <content type="html"><![CDATA[<p>上个周末的两天，参加了PMP的第一周培训。总的来说感觉还不错，老师讲得挺有趣的，且结合自身经验给我们讲授了项目管理的一些知识。</p>
<p>《PMBOK》我在国庆假期之前看了一遍，假期中又看了一遍。记住的不多，但是对PMI项目管理的整体脉络还是有了一定映像。五大过程组，十大知识领域已经基本可以记住，但过程中的ITTO还是记不住的，感觉特别多而杂，需要在学习中再好好总结一下，一定要在考试钱记住。</p>
<p>两天的学习中，给我映像比较深的有『三点估算』，用来估算项目进度，感觉特别适用。<br>以前自己在估算项目进度的时候，更多的依赖经验，并没有利用『公式』来估算，了解到『三点估算』之后，将可以用更科学的方法来估算项目进度了。</p>
<p>『项目进度网络图』也是很好的东西，能帮助我们快速的了解项目进度结构，分析出哪些任务是关键节点，对于项目进度的影响最大。同时我也现学现用的在产品下个版本的进度规划中使用了起来。</p>
<p>学习回来之后，我尝试使用OmniPlan对接下来的版本计划进行管理，发现OmniPlan的设计完美契合了PMI的理论，使用起来很顺手。虽然Omni这套软件我收入囊中已经很久，而且该软件大名在外。只是以前使用的时候，觉得怪怪的，通过学习之后，发现了其中的精髓，使用起来自然顺手了很多（同时也在使用OmniOutliner整理PMBOK的读书笔记，也是比较好用的）。</p>
<p>这周末没有课，周日参加学习小组的聚会。感觉自己做错的题还是蛮多的，和小组其他同学比起来还差一下，有必要回来恶补一下了。很期待下周的课程。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;上个周末的两天，参加了PMP的第一周培训。总的来说感觉还不错，老师讲得挺有趣的，且结合自身经验给我们讲授了项目管理的一些知识。&lt;/p&gt;
&lt;p&gt;《PMBOK》我在国庆假期之前看了一遍，假期中又看了一遍。记住的不多，但是对PMI项目管理的整体脉络还是有了一定映像。五大过程组，十
    
    </summary>
    
    
      <category term="随笔" scheme="http://code4cocoa.com/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>关于PMP的一些事</title>
    <link href="http://code4cocoa.com/2017/09/17/%E5%85%B3%E4%BA%8EPMP%E7%9A%84%E4%B8%80%E4%BA%9B%E4%BA%8B/"/>
    <id>http://code4cocoa.com/2017/09/17/关于PMP的一些事/</id>
    <published>2017-09-17T10:05:58.000Z</published>
    <updated>2017-09-17T12:35:59.000Z</updated>
    
    <content type="html"><![CDATA[<p>知道PMP应该是在13年的时候，当时一群人在天台闲聊，一个同事提到自己的规划是在后面两年要拿下PMP证书。</p>
<figure class="highlight cmake"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">PMP指的是项目管理专业人士资格认证。它是由美国项目管理协会（<span class="keyword">Project</span> Management Institute(PMI)发起的，严格评估项目管理人员知识技能是否具有高品质的资格认证考试。</div></pre></td></tr></table></figure>
<p>后来随着工作的繁忙，渐渐将这事儿忘了。但随着项目的扩大，自己的管理职能越来越多，慢慢感觉需要一套理论来找找感觉，于是又想起了这事儿。</p>
<p>原计划16年就去系统学习一下，但因为团队刚扩大，还有很多更重要的事情，便耽搁了。今年随着团队的稳定，在管理『方法论』上，我也希望有新的『突破』，于是确定报考PMP。</p>
<p>上周风风火火的去报了培训，开始利用业余时间啃PMBOK，还是颇有感受的（谈不上收获，只是结合自己目前的管理方式，再看看书上的理论，觉得有值得借鉴的地方）。</p>
<p>比如项目管理的五大过程：</p>
<figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="bullet">* </span>启动</div><div class="line"><span class="bullet">* </span>规划</div><div class="line"><span class="bullet">* </span>执行</div><div class="line"><span class="bullet">* </span>监控</div><div class="line"><span class="bullet">* </span>收尾</div></pre></td></tr></table></figure>
<p>就很容易对应软件工程中的『瀑布开发模型』。</p>
<p>这套理论更多的是对我们的一种方向指导，最终还是要结合团队及项目实际情况变通处理。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;知道PMP应该是在13年的时候，当时一群人在天台闲聊，一个同事提到自己的规划是在后面两年要拿下PMP证书。&lt;/p&gt;
&lt;figure class=&quot;highlight cmake&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;
    
    </summary>
    
    
      <category term="随笔" scheme="http://code4cocoa.com/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>罗伯特议事规则</title>
    <link href="http://code4cocoa.com/2017/07/30/%E7%BD%97%E4%BC%AF%E7%89%B9%E8%AE%AE%E4%BA%8B%E8%A7%84%E5%88%99/"/>
    <id>http://code4cocoa.com/2017/07/30/罗伯特议事规则/</id>
    <published>2017-07-30T13:54:48.000Z</published>
    <updated>2017-09-03T14:32:19.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>如何在没有权威的情况下平等自治、达成共识、重建秩序。</strong></p>
<ul>
<li>动议可行原则 <em>什么样的问题可以拿来讨论?</em></li>
<li>主持中立原则 <em>总是『领导说了算』如何应对</em></li>
<li>弃权无效原则 <em>有人不表态想当『老好人』怎么办</em></li>
</ul>
<p>周末的时候看完《可操作的民主》一书，对于<strong>罗伯特议事规则</strong>产生了浓厚兴趣。同时觉得该书作为一本『纪实书籍』(不知道是不是有这种分类方式)，语言诙谐，在叙述已发生的事情时，将<strong>罗伯特议事规则</strong>娓娓道来，让读者不觉得枯燥，实在是很难得的。</p>
<p>我在工作中，也有各种各样的会议。有些乱哄哄的，有些开半天不明所以，有些主持人就是个『暖场』的角色，尤其是那种需要『作出确定』的会议，大部分的时候都没有结果，最终领导决定，大家才『服气』。了解到『罗伯特议事规则』后，我有种豁然开朗的感觉，缜密的规则，保证了会议能得出结果，保障每个人的权利。往后将在团队会议中引入，让会议有序高效。</p>
<p>『是领导不民主，还是我们自己已习惯依赖领导？追求自由，我们是否明白边界的含义，是否理解规则的价值？追求民主，我们能否接纳平等带来的折磨，包容多元引致的碰撞？到底是文化决定规则，还是规则塑造文化？』这是本书封面的一句话，尤其最后一句『文化』和『规则』的关系，让我有了一些在团队建设方面的思考。</p>
<p>本书的两位作者<em>寇延丁、袁天鹏</em>也是著名的民间公益行动者，其中<em>袁天鹏</em>本身也是议事规则专家，同时也是中文版《罗伯特议事规则》的译者，是《罗伯特议事规则》在中国的布道人。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;如何在没有权威的情况下平等自治、达成共识、重建秩序。&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;动议可行原则 &lt;em&gt;什么样的问题可以拿来讨论?&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;主持中立原则 &lt;em&gt;总是『领导说了算』如何应对&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;弃权
    
    </summary>
    
    
      <category term="随笔" scheme="http://code4cocoa.com/tags/%E9%9A%8F%E7%AC%94/"/>
    
      <category term="读书笔记" scheme="http://code4cocoa.com/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>MySqlParameter的坑</title>
    <link href="http://code4cocoa.com/2017/06/11/MySqlParameter%E7%9A%84%E5%9D%91/"/>
    <id>http://code4cocoa.com/2017/06/11/MySqlParameter的坑/</id>
    <published>2017-06-11T09:01:47.000Z</published>
    <updated>2017-09-03T14:49:04.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近遇到一个MySQL相关的坑，这里简单记录一下。<br>在.Net中执行MySQL语句传参的时候我们一般使用MySqlParameter对象。于是在某个Dao层的方法中，我写了如下的语句：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">var parms = new MySqlParameter[]</div><div class="line">&#123;</div><div class="line">new MySqlParameter(&quot;?Type&quot;,(int)StatusType.Normal)</div><div class="line">&#125;</div><div class="line">string sql = @&quot;SELECT * FROM TABLE T WHERE T.Type = ?Type;&quot;;</div></pre></td></tr></table></figure></p>
<p>结果是死活查不出数据，但是将SQL直接拿到服务器上运行，确能正常查出数据，实在是让人费解。随着不断调试，发现MySqlParameter的Value值不知为什么一直为null，后来试着改写了语句，用一个临时变量存储枚举值。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">int type = (int)StatusType.Normal</div><div class="line">var parms = new MySqlParameter[]</div><div class="line">&#123;</div><div class="line">    new MySqlParameter(&quot;?Type&quot;,type)</div><div class="line">&#125;</div><div class="line">string sql = @&quot;SELECT * FROM TABLE T WHERE T.Type = ?Type;&quot;;</div></pre></td></tr></table></figure></p>
<p>查询就正常了。</p>
<p>原来问题出在MySqlParameter的构造函数上，有两个关键的构造函数如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">public MySqlParameter(string name, object value) &#123; </div><div class="line">    // ...... </div><div class="line">&#125; </div><div class="line">public MySqlParameter(string name, MySqlDbType type) &#123; </div><div class="line">    // ...... </div><div class="line">    // MySqlDbType是个枚举类型 </div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>我们第一次调用的时候，因为枚举为0，所以被当做第二个构造函数调用了。但是经测试当枚举不为0的时候，使用第一种调用方式，还是会使用第一种构造函数，确实令人看不懂。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近遇到一个MySQL相关的坑，这里简单记录一下。&lt;br&gt;在.Net中执行MySQL语句传参的时候我们一般使用MySqlParameter对象。于是在某个Dao层的方法中，我写了如下的语句：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table
    
    </summary>
    
    
      <category term="MySQL" scheme="http://code4cocoa.com/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>行为驱动开发</title>
    <link href="http://code4cocoa.com/2017/05/21/%E8%A1%8C%E4%B8%BA%E9%A9%B1%E5%8A%A8%E5%BC%80%E5%8F%91/"/>
    <id>http://code4cocoa.com/2017/05/21/行为驱动开发/</id>
    <published>2017-05-21T12:32:32.000Z</published>
    <updated>2017-05-21T12:46:02.000Z</updated>
    
    <content type="html"><![CDATA[<p>流行的「敏捷软件开发」技术中的TDD，想必大家都听过，但是还有一种BDD(Behavior-driven development)行为驱动开发知道的人恐怕就很少了。我也是在去年参加蚂蚁金服技术开发日的时候了解到了，我在这里简单整理一下。</p>
<p>BDD鼓励软件项目中的开发者、QA和非技术人员或商业参与者之间的协作。</p>
<p>BDD的做法包括:</p>
<blockquote>
<ul>
<li>确立不同利益相关者要实现的远景目标。</li>
<li>使用特性注入方法绘制出达到这些目标所需要的特性。</li>
<li>通过由外及内的软件开发方法，把涉及到的利益相关者融入到实现的过程中</li>
<li>使用例子来描述应用程序的行为或代码的每个单元。</li>
<li>通过自动运行这些例子，提供快速反馈，进行回归测试。</li>
<li>使用“应当(should)”来描述软件的行为，以帮助阐明代码的职责，以及回答对该软件的功能性的质疑。</li>
<li>使用“确保(ensure)”来描述软件的职责，以把代码本身的效用与其他单元(element)代码带来的边际效用中区分出来。</li>
</ul>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;流行的「敏捷软件开发」技术中的TDD，想必大家都听过，但是还有一种BDD(Behavior-driven development)行为驱动开发知道的人恐怕就很少了。我也是在去年参加蚂蚁金服技术开发日的时候了解到了，我在这里简单整理一下。&lt;/p&gt;
&lt;p&gt;BDD鼓励软件项目中的
    
    </summary>
    
    
      <category term="开发模式" scheme="http://code4cocoa.com/tags/%E5%BC%80%E5%8F%91%E6%A8%A1%E5%BC%8F/"/>
    
      <category term="BDD" scheme="http://code4cocoa.com/tags/BDD/"/>
    
  </entry>
  
  <entry>
    <title>170312</title>
    <link href="http://code4cocoa.com/2017/03/12/170312/"/>
    <id>http://code4cocoa.com/2017/03/12/170312/</id>
    <published>2017-03-12T13:43:17.000Z</published>
    <updated>2017-03-13T14:58:55.000Z</updated>
    
    <content type="html"><![CDATA[<p>今年计划中的三个重大版本的第一个，已经在上周发布了。整个流程没有出什么大问题，不过大家还是一起折腾到了第二天的凌晨3点。我简单算了一下，我们从20:30分开始更新数据库，21点的时候更新完毕开始测试。两个人测试新版本，两个人测试老版本。老版本只测常用功能，新版本则照例将所有功能跑一遍。在这6个小时中，修改BUG的时间其实不到一个小时，研发同事很长一段时间都是在等待测试结果，所以目前发版的瓶颈在测试效率上，考虑到整个产品的功能只会多不会少，所以我需要好好思考一下如何优化测试流程，能引入什么工具来提升测试效率。</p>
<p>最近利用Jenkins和阿里云Code进行了自动构建的测试，决定下个版本使用起来。关于自动构建，以前在上一个团队的时候简单了解过，那个时候用的是FinalBuilder，貌似是很古老的持续集成工具（我也不是很了解FinalBuilder，当时是另一个同事在做这个事情。上周有其他项目组的同事过来跟我讨论自动构建的问题，提到FinalBuilder，说是不想用那个古老的东西）。Jenkins + 阿里云Code + 蒲公英，看起来是一套很棒的组合。</p>
<p>整个服务器的架构一直是我想要进行调整的，目前手机端服务使用WCF搭建，Web端则是自己单独的一套，所以每次做新功能的时候经常是服务端的同事写一套，Web端的同事还要再写一遍，大大降低了研发的效率。目前我的想法是废弃掉WCF，采用WebAPI提供服务。Web端和手机端都通过WebAPI与数据库进行数据交互，这样就将Web端和手机端的数据源整合统一起来，并且有利于提升研发效率。现在我在思考WebAPI端的架构，是完全按照Restful风格呢（完全按照Restful风格来设计接口也挺难的），还是根据业务形成一套自己的风格。</p>
<p>入手了一本讲克苏鲁神话的书，第一次知道克苏鲁神话是玩血源诅咒的时候，看攻略了解到的。影响最深的是克苏鲁神话的中心思想是『知道得越多，死得越快』，o(╯□╰)o。</p>
<p>读库1702到了，简单翻了翻目录，发现里面有篇马伯庸的文章，应该是我喜欢的类型，决定先看。同时寄来的还有一本讲植物智能的书，书的封皮很棒，是织物的那种感觉，是一本很精致的书。同事提到以后买实体书，要先看封面好不好看，○|￣|_。</p>
<p>手中的iPhone 6 Plus越来越不争气，尾插充电也越来越不好使，考虑到今年iPhone有重大更新，于是不打算换iPhone 7 Plus，先拿备用机红米Note3顶半年再说。这几天使用红米还算凑合，双卡双待确实挺爽的，很喜欢iPhone未来也支持这个功能，这样我能在电信4G网络不好的时候，切换到移动4G。</p>
<p>入手了QCY的Q29蓝牙耳机，类似于苹果AirPods那种，不过外观倒是没有山寨。相对于AirPods 1000+的价格，Q29目前199的价格实在是实惠。已经用了两天了，感觉还不错，主要因为我是木耳，也听不出好坏。唯一的问题是，耳机放充电盒子充电的时候不是很紧，稍微动一下耳机和充电头就会接触不良，充不了电。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今年计划中的三个重大版本的第一个，已经在上周发布了。整个流程没有出什么大问题，不过大家还是一起折腾到了第二天的凌晨3点。我简单算了一下，我们从20:30分开始更新数据库，21点的时候更新完毕开始测试。两个人测试新版本，两个人测试老版本。老版本只测常用功能，新版本则照例将所有
    
    </summary>
    
    
      <category term="随笔" scheme="http://code4cocoa.com/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>关于《读库》</title>
    <link href="http://code4cocoa.com/2017/02/18/%E5%85%B3%E4%BA%8E%E3%80%8A%E8%AF%BB%E5%BA%93%E3%80%8B/"/>
    <id>http://code4cocoa.com/2017/02/18/关于《读库》/</id>
    <published>2017-02-18T14:23:50.000Z</published>
    <updated>2017-02-18T14:30:51.000Z</updated>
    
    <content type="html"><![CDATA[<p>《读库》这本『杂志』我是很早就听说过的，记忆中是在池建强老师的文章中看到的，同时池建强老师也推荐了一番。正好年前在杂志铺翻杂志的时候想了起来，就索性去天猫订了一年。年后假期回来，第一时间就拿到了1700和1701，很欣喜那么快就拿到书了，于是迫不及待的拆开了快递包装。</p>
<p>刚拆开包装的时候，两本蛮厚的书出现在眼前。那在手上，那分量感觉又有点不对，谁能想到那样有『厚重感』的外形，拿在手里却又是那样的轻呢。将近400页的书，比那些200页的书都轻了不少。尤其是对于我这种看惯了大部头的技术男来说，更是觉得有点匪夷所思。后来在网上了解到，《读库》为了保证阅读的舒适，特地选择了更轻的纸来印刷。</p>
<p>读库的封面很简洁，没有多余的文字和色彩。我很难用合适的词汇来描述它的这种简洁，或许是看惯了大大的LOGO，花花绿绿的封面。面对这种简洁的封面，有一种莫名的好感。</p>
<p>摸着书的封面，有一种磨砂的感觉。内页的纸摸起来也很舒服，感觉很软，韧性很好，并不会因为薄和轻而变得易碎。</p>
<p>内容上，1700更多的是一种总结回顾，不过里面记录的事情还是挺有趣的。1701还没有细细品味，这里就不多说了。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;《读库》这本『杂志』我是很早就听说过的，记忆中是在池建强老师的文章中看到的，同时池建强老师也推荐了一番。正好年前在杂志铺翻杂志的时候想了起来，就索性去天猫订了一年。年后假期回来，第一时间就拿到了1700和1701，很欣喜那么快就拿到书了，于是迫不及待的拆开了快递包装。&lt;/p
    
    </summary>
    
    
      <category term="随笔" scheme="http://code4cocoa.com/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>2016总结</title>
    <link href="http://code4cocoa.com/2017/01/15/2016%E6%80%BB%E7%BB%93/"/>
    <id>http://code4cocoa.com/2017/01/15/2016总结/</id>
    <published>2017-01-15T07:17:09.000Z</published>
    <updated>2017-01-15T07:18:17.000Z</updated>
    
    <content type="html"><![CDATA[<p>今天是2017年的第一天，白天一直在外面逛商场什么的挺累的。晚上在家，这个点很适合静静的整理一下思绪，将2016年的经历做一个简单的总结。</p>
<h1 id="个人"><a href="#个人" class="headerlink" title="个人"></a>个人</h1><p>去年对我个人来说是挺重要的一年，因为这是我毕业的第五年。以前我看过一篇文章，说是一个毕业生的前两年是成长最快的时候，同时也是确立职业目标的时候。你需要在这两年中，快速的找到适合自己的岗位，为将来的发展打好基础。对于我而言，我很庆幸的是我在很早的时候就确立了我的职业目标，我选择的职业也是我最爱的。所以我在我的岗位上没有过迷茫，只想着快点成长起来。在工作前两年的时候，就是疯狂的学习技术，花大量时间去看书，尝试新技术，参加各种技术交流会，看着大牛们在技术交流会上侃侃而谈，我梦想着自己有一天能像他们一样。</p>
<p>前两年的快速成长之后，第三、第四年是一个成熟期。这个时候经历了快速成长的年轻人，现在应该是公司的业务骨干，技术上趋于成熟，这个时候需要追求一定的技术深度，同时在处理问题上，不止能解决好技术本身上的问题，还是有意识的能协调非技术上的问题。</p>
<p>第五年则是对自己的检视，这个时候可能已经带过小团队，在公司或许是中低层管理者，或许面对技术或管理的转型，这个时候通常离自己的职业规划，已经有比较清晰的升迁路径。这个时候更需要针对性的提升自己，补足自己的短板。</p>
<h2 id="技术"><a href="#技术" class="headerlink" title="技术"></a>技术</h2><p>iOS端持续的进行着重构工作。重新封装了网络请求，将AFN替换为NSURLSession，并针对业务进行了封装。同时对整个APP的架构进行了改造，引入ViewModel层，让ViewController变得更干净。引入ReactiveCocoa，尝试函数式编程，目前用得还挺浅的，主要停留在处理事件响应阶段。整个APP的重构是一个持续的工程，同时我们也在不停的修正一些架构上的错误。</p>
<p>年中的时候，服务器时不时的抽风，这段时间学习了大量运维方面的知识，也因为到处问问题，遭过不少白眼。但我觉得挺值得的，正是这样使我对运维工作有了新的认识，同时学到了不少知识。</p>
<h2 id="生活"><a href="#生活" class="headerlink" title="生活"></a>生活</h2><p>入手了一直想要的游戏机，作为一个很小就在街机厅玩的人，拥有一台自己的游戏机一直是我的一个小梦想，今年终于实现了，入手了PS4和3DS，目前努力攻略FFX和火纹IF。</p>
<p>9月份的时候陪老婆去了趟韩国，感觉只能算凑合吧，毕竟自己对那些电视剧中的景点无爱，我也不爱韩剧。不过我对韩国这个国家还是心存敬畏的，毕竟能在短短几十年间成为发达国家的一员，一定有其可取之处。</p>
<p>11月的时候开始健身和游泳，主要为了控制日渐增长的体重。经过折腾顺利学会了蛙泳，目前游一个来回问题不大。器械训练上，感觉自己的力量不是很足，现在也有这方面的锻炼。</p>
<h2 id="规划"><a href="#规划" class="headerlink" title="规划"></a>规划</h2><p>2017年对于产品来说是关键的一年，也是技术团队走向成熟提升的一年。我在个人能力上也将着手进行新的提升。打磨自己的管理能力并形成自己的管理风格。对于技术团队的管理，有三个要点<em>团队共享、划分纬度、循环执行</em>，今年我的努力方向就是做好这三点。</p>
<h1 id="团队"><a href="#团队" class="headerlink" title="团队"></a>团队</h1><p>2016年初的时候，研发团队经历了较大的人员变动，所以大半年的时间都在进行磨合，随着人员磨合的到位，2017年的研发效率将稳步提升。还有一些先进工具的引入，也是新的一年里的重要工作，比如GitLab、Fastlane、Jenkins实现持续集成，让做包测试的流程很高效。</p>
<p>随着业务量的增长，对于我们的程序架构也会有新的要求，比如一直计划将WCF换为更易用的WebAPI，因为时间的原因一直没有处理，目前比较紧迫的事情为解决基础框架(方法)无法满足新业务的问题。</p>
<h2 id="技术-1"><a href="#技术-1" class="headerlink" title="技术"></a>技术</h2><p>2016年年初的时候进行了数据库分表和数据库迁移，年末的时候对照片进行了迁移，并做了负载均衡。还有很多报表的优化，总得来说16年团队技术上的提升还是挺大的，特别是随着用户越来越多，数据量越来越大，对整个后台服务都将是是考验。</p>
<h2 id="管理"><a href="#管理" class="headerlink" title="管理"></a>管理</h2><p>2016年在团队的管理上还是比较粗放的管理，主要是基于版本任务完成情况的管理方式。该方式在人员相对较少的时候，是一种高效的管理方式。但随着人员的增多，单纯基于任务完成度的管理，无法多元化的去评价一名技术人员的贡献。还有团队能力的提升，也是不能单纯依靠任务完成度来进行管理的。</p>
<h2 id="规划-1"><a href="#规划-1" class="headerlink" title="规划"></a>规划</h2><p>在2017年，研发团队将关注三个要点：</p>
<ul>
<li>团队共享 —— 目标制定上下通透，目标制定的过程不仅仅是自上而下或自下而上的过程，而是两者交替进行，最终实现目标与整个团队的深度整合。</li>
<li>划分维度 —— 业务、技术需要整体考虑，平衡发展。</li>
<li>循环执行 —— 目标拆解成具体行动，形成习惯，持续反馈。</li>
</ul>
<p>技术上，争取引入更多高效的技术手段，能解决困扰我们的轨迹、监控等问题。</p>
<p>PS:拖拖拉拉两周多才写完，突然觉得自己的写文确实不如初中、高中时那么顺畅。现在写起来结结巴巴的，有时还不通顺，看来还得多练了。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今天是2017年的第一天，白天一直在外面逛商场什么的挺累的。晚上在家，这个点很适合静静的整理一下思绪，将2016年的经历做一个简单的总结。&lt;/p&gt;
&lt;h1 id=&quot;个人&quot;&gt;&lt;a href=&quot;#个人&quot; class=&quot;headerlink&quot; title=&quot;个人&quot;&gt;&lt;/a&gt;个人&lt;
    
    </summary>
    
    
      <category term="总结" scheme="http://code4cocoa.com/tags/%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>项目中AOP的使用</title>
    <link href="http://code4cocoa.com/2016/12/25/%E9%A1%B9%E7%9B%AE%E4%B8%ADAOP%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <id>http://code4cocoa.com/2016/12/25/项目中AOP的使用/</id>
    <published>2016-12-25T14:32:20.000Z</published>
    <updated>2016-12-25T14:33:20.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="AOP"><a href="#AOP" class="headerlink" title="AOP"></a>AOP</h1><p>Aspect Oriented Programming 面向切面(切片)编程的缩写。</p>
<h2 id="什么是AOP"><a href="#什么是AOP" class="headerlink" title="什么是AOP"></a>什么是AOP</h2><p><strong>在运行时，动态地将代码切入到类的指定方法、指定位置上的编程思想就是面向切面的编程。</strong>这句话清晰简洁的给AOP做了定义。</p>
<figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">面向方面编程（AOP）是施乐公司帕洛阿尔托研究中心（Xerox PARC）在上世纪<span class="number">90</span>年代发明的一种编程范式，但真正的发展却兴起于近几年对软件设计方兴未艾的研究。</div><div class="line"></div><div class="line">由于软件系统越来越复杂，大型的企业级应用越来越需要人们将核心业务与公共业务分离。AOP技术正是通过编写横切关注点的代码，即“方面”，分离出通用的服务以形成统一的功能架构。它能够将应用程序中的商业逻辑同对其提供支持的通用服务进行分离，使得开发人员从重复解决通用服务的劳动中解脱出来，而仅专注于企业的核心商业逻辑。</div><div class="line"></div><div class="line">因此，AOP技术也就受到越来越多的关注，而应用于各种平台下的AOP技术也应运而生。但由于AOP技术相对于成熟的OOP技术而言，在性能、稳定性、适用性等方面还有待完善，同时AOP技术也没有形成一个统一的标准，这使得AOP技术的研究更具有前沿性的探索价值。</div></pre></td></tr></table></figure>
<h2 id="能做什么"><a href="#能做什么" class="headerlink" title="能做什么"></a>能做什么</h2><p>AOP能将事务处理、日志管理、权限控制、异常处理等封装起来，以便于减少系统的重复代码，降低模块间的耦合，使业务代码更纯粹易读，且有利于未来的可操作性和可维护性。</p>
<h2 id="处理繁琐的菜单-amp-操作权限"><a href="#处理繁琐的菜单-amp-操作权限" class="headerlink" title="处理繁琐的菜单&amp;操作权限"></a>处理繁琐的菜单&amp;操作权限</h2><p>在XXX管理系统中，菜单权限是必不可少的。并且随着企业管理的精细化，菜单的各种操作权限判断也是越来越多，所以简洁统一的处理方式是很有必要的。</p>
<p>在我们的项目中，每一个菜单权限都可能涉及到操作权限，它们包括：查看、新增、编辑、删除、审批、分配、重置、轨迹、下载、转移、退回、转为客户等11个。随着产品功能的不断完善，操作权限也将会越来越多。如果我们在每个ViewController的ViewDidLoad方法中去判断控制的话，工作量会非常的大。而且如果以后操作权限有变动的话，我们还得每个ViewController都去修改，很容易漏改。那么有简单的处理方式吗？</p>
<p>当然利用AOP思想和Objective-C runtime的特性，我们可以像下面这样处理：</p>
<ol>
<li>利用分类或继承，为每个ViewController都添加权限相关的属性。</li>
<li>利用runtime的特性，植入权限验证代码(通常替换ViewDidLoad方法)。</li>
<li>创建权限相关的控件时提供固定的Tag值(比如EditButton的Tag值为1000，NewButton的Tag值为2000)。</li>
<li>在新的ViewDidLoad方法中利用第一步中的权限属性，对权限相关控件(利用Tag来获取相关控件)进行统一操作，这样就实现了在所有ViewController中统一判断权限。</li>
</ol>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">还有另一种不替换ViewDidLoad的方法。</div><div class="line"></div><div class="line">即利用分类，在ViewController的分类中新添加一个类方法，比如叫VerifyPermission。在该方法中判断相关权限。这样只需要在所有ViewDidLoad中手动调用一次VerifyPermission即可。</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;AOP&quot;&gt;&lt;a href=&quot;#AOP&quot; class=&quot;headerlink&quot; title=&quot;AOP&quot;&gt;&lt;/a&gt;AOP&lt;/h1&gt;&lt;p&gt;Aspect Oriented Programming 面向切面(切片)编程的缩写。&lt;/p&gt;
&lt;h2 id=&quot;什么是AOP&quot;&gt;&lt;a 
    
    </summary>
    
    
      <category term="iOS" scheme="http://code4cocoa.com/tags/iOS/"/>
    
      <category term="AOP" scheme="http://code4cocoa.com/tags/AOP/"/>
    
  </entry>
  
  <entry>
    <title>韩国旅游</title>
    <link href="http://code4cocoa.com/2016/11/03/%E9%9F%A9%E5%9B%BD%E6%97%85%E6%B8%B8/"/>
    <id>http://code4cocoa.com/2016/11/03/韩国旅游/</id>
    <published>2016-11-03T11:55:15.000Z</published>
    <updated>2016-11-03T11:56:24.000Z</updated>
    
    <content type="html"><![CDATA[<p>前段时间去韩国首尔和济州岛转了转，个人对于韩国没什么感觉，了解也仅限于三星，LG等等。对于韩剧什么滴完全木有兴趣，不过老婆倒是挺激动地o(╯□╰)o。</p>
<p>大概3个小时左右的飞机，我们到了仁川机场。下了飞机还要坐地铁才能从航站楼到出关的地方o(╯□╰)o，把我吓到了，这机场是有多大。出了机场大概1个小时的车程就到了首尔，然后参观了青瓦台和景福宫。青瓦台周围的警察大哥确实挺帅的，而且都有擦粉。路上的汽车基本都是韩国产的，现代、起亚、双龙、三星等等。晚上8点左右飞济州岛。</p>
<p>第二天在济州岛，天气实在是不好，一直在刮风下雨。不过没有影响的女士们的热情，参观了好几个韩剧中出现了的景点（反正我是不知道到底是什么景点）。冷得实在不行，在某个景点喝了杯咖啡，味道感觉还是不错的。另外每一顿饭都有辣白菜，墙面一两顿还好，后面实在是不想吃了。</p>
<p>第三天上午在济州岛逛了逛果园，买了些特产。下午回到首尔，晚上貌似吃了顿韩国烤肉（其实在去韩国前一天，我们在成都也去吃了顿韩国烤肉。。。。。），味道个人觉得属于不难吃。</p>
<p>第四天去了首尔塔，感觉还不错，那里卖的冰淇淋挺好吃的。下午去了明洞那边，还去了两个免税店，买了很多化妆品。晚上在乐天世界玩，可惜的是因为很多有趣的项目都要排队，而且要排1个多小时，所以也没有玩到项目。估计也是因为中秋节，韩国放假，很多本地人也来到乐天世界玩。</p>
<p>个人总的感觉就是，去了解一下韩国文化什么的还可以，男生的话过去估计都会觉得很无聊。女生过去就是买买买。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;前段时间去韩国首尔和济州岛转了转，个人对于韩国没什么感觉，了解也仅限于三星，LG等等。对于韩剧什么滴完全木有兴趣，不过老婆倒是挺激动地o(╯□╰)o。&lt;/p&gt;
&lt;p&gt;大概3个小时左右的飞机，我们到了仁川机场。下了飞机还要坐地铁才能从航站楼到出关的地方o(╯□╰)o，把我吓到
    
    </summary>
    
    
      <category term="杂记" scheme="http://code4cocoa.com/tags/%E6%9D%82%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>Paw</title>
    <link href="http://code4cocoa.com/2016/07/24/Paw/"/>
    <id>http://code4cocoa.com/2016/07/24/Paw/</id>
    <published>2016-07-24T13:39:59.000Z</published>
    <updated>2016-07-24T13:41:15.000Z</updated>
    
    <content type="html"><![CDATA[<p>因为个人在产品研发中，既要负责服务端API的研发工作，同时也要负责iOS端的研发工作，所以有时候写完服务端API，马上就用iOS对接，同时判断API有没有问题。</p>
<p>不过随着团队人员的扩张，新来的客户端同事，不懂服务器端的相关技术，导致服务端API在写完后，需要进行简单的测试，保证服务器端能够顺利调用(服务端API总是会在客户端调用之前完成，并且可能客户端要过较久一段时间才会调用，为了能让负责服务端的同事自测API的状况，我曾考虑服务端的逻辑部分使用单元测试来进行处理)，我找到了Paw这款软件，它号称是Mac最先进的HTTP客户端。</p>
<p><a href="https://luckymarmot.com/zh-hans/paw" target="_blank" rel="external">Paw</a>除了友好，易操作的界面之外。还有个强大的功能就是可以生成客户端请求代码，支持C#、Python、Swift、Objective-C(AFNetworking，NSURLSession)等等。更支持请求动态值，从之前的响应中获取数据，例如身份验证令牌、计算后的哈希值、签名、测试用的随机数，做一些数学运算，或者任何您想做的。</p>
<p>官网官网价格为49.99刀，不过在这里我推荐<a href="https://item.taobao.com/item.htm?spm=a1z10.4-c.w4004-11449138832.26.3syAj4&amp;id=45684786090" target="_blank" rel="external">数码荔枝</a>，99 RMB即可入手，实在是超级划算。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;因为个人在产品研发中，既要负责服务端API的研发工作，同时也要负责iOS端的研发工作，所以有时候写完服务端API，马上就用iOS对接，同时判断API有没有问题。&lt;/p&gt;
&lt;p&gt;不过随着团队人员的扩张，新来的客户端同事，不懂服务器端的相关技术，导致服务端API在写完后，需要进
    
    </summary>
    
    
      <category term="Mac" scheme="http://code4cocoa.com/tags/Mac/"/>
    
      <category term="小工具" scheme="http://code4cocoa.com/tags/%E5%B0%8F%E5%B7%A5%E5%85%B7/"/>
    
      <category term="HTTP" scheme="http://code4cocoa.com/tags/HTTP/"/>
    
  </entry>
  
  <entry>
    <title>一大早被DDoS。。。。。</title>
    <link href="http://code4cocoa.com/2016/07/03/%E4%B8%80%E5%A4%A7%E6%97%A9%E8%A2%ABDDoS%E3%80%82%E3%80%82%E3%80%82%E3%80%82%E3%80%82/"/>
    <id>http://code4cocoa.com/2016/07/03/一大早被DDoS。。。。。/</id>
    <published>2016-07-03T15:41:46.000Z</published>
    <updated>2016-07-03T15:43:29.000Z</updated>
    
    <content type="html"><![CDATA[<p>今天早晨正在睡梦中，一阵手机震动将我摇醒。迷迷糊糊的看了下发现是产品经理打来的电话，心想这么早，莫非服务器出问题了？不出所料，产品经理告知目前我们服务器访问不了了，最大的客户正在投诉。</p>
<p>这时我脑袋已清醒，正在飞速的思考——服务器突然访问不了，难道服务进程挂了？同时立马摸出电脑，远程登录服务器，查看服务——正常，查看数据库服务——正常，查看系统日志——无异常。o(╯□╰)o，立马重启服务，再试，没有效果。这时心中突然有了不好的预感，难道被DDoS了？查看阿里云控制台，果然不出所料，DDoS攻击触发了流量清洗(流量清洗指过滤掉异常流量，保证服务器的正常运行。当然阿里云的流量清洗估计因为算法问题，将我们的正常访问也清洗掉了)，APP的请求都被阿里云重定向了。</p>
<p>当下联系阿里云客服，客服告知目前的情况有两个选择，1.购买阿里云高防服务。2.等攻击结束，自行恢复。<br>看了下阿里云的高防服务价格，WTF？，最最便宜8800每月。。。。。。</p>
<p>攻击30分钟后结束，流量清洗关闭，服务器也恢复了正常。不得不说因为DDoS攻击的成本低，效果显著，现在已经成为普遍的攻击手段。在DDoS的防范上，成本确实很高，在遭受攻击的时候，完全不知道能做什么。而实际上确实我们什么也做不了。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今天早晨正在睡梦中，一阵手机震动将我摇醒。迷迷糊糊的看了下发现是产品经理打来的电话，心想这么早，莫非服务器出问题了？不出所料，产品经理告知目前我们服务器访问不了了，最大的客户正在投诉。&lt;/p&gt;
&lt;p&gt;这时我脑袋已清醒，正在飞速的思考——服务器突然访问不了，难道服务进程挂了？
    
    </summary>
    
    
      <category term="随笔" scheme="http://code4cocoa.com/tags/%E9%9A%8F%E7%AC%94/"/>
    
      <category term="DDoS" scheme="http://code4cocoa.com/tags/DDoS/"/>
    
  </entry>
  
  <entry>
    <title>如何创建Event</title>
    <link href="http://code4cocoa.com/2016/05/22/%E5%A6%82%E4%BD%95%E5%88%9B%E5%BB%BAEvent/"/>
    <id>http://code4cocoa.com/2016/05/22/如何创建Event/</id>
    <published>2016-05-22T15:33:07.000Z</published>
    <updated>2016-05-22T15:34:50.000Z</updated>
    
    <content type="html"><![CDATA[<p>因项目中有一个日程功能，个人认为和iOS中日历的事件(还有另一个东西叫提醒)挺相似的，于是决定将其数据和与系统日历事件同步，这样可以利用系统日历事件的提醒功能。</p>
<pre>
**日历事件：**主要是时间为线索，将所有事件组织起来，事件或者说是行程安排是有时间先后顺序的。
**提醒事项：**功能和日历中的添加事件很相似，最大的不同在与条目的组织形式。提醒事项里的条目不再以时间顺序排列，而是可以对条目性质进行分类，如分成生活、工作、学习等等。或者也可以根据项目进行分类，且条目可以设置紧急程度。
**总结：**日历事件适合安排行程，提醒事项适用于项目的任务管理。</pre>

<ul>
<li>引入EventKit.framework。</li>
<li>创建EKEventStore<br><pre>EKEventStore用于从用户的日历数据库中获取、创建、编辑和删除事件。</pre><script src="https://gist.github.com/yuxiangq/0741cd8a55832830e252cf12696699ad.js"></script></li>
<li>创建CalendarEvent<script src="https://gist.github.com/yuxiangq/f24490a827342d04f12138c9d8e5c22c.js"></script>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;因项目中有一个日程功能，个人认为和iOS中日历的事件(还有另一个东西叫提醒)挺相似的，于是决定将其数据和与系统日历事件同步，这样可以利用系统日历事件的提醒功能。&lt;/p&gt;
&lt;pre&gt;
**日历事件：**主要是时间为线索，将所有事件组织起来，事件或者说是行程安排是有时间先后顺序
    
    </summary>
    
    
      <category term="iOS" scheme="http://code4cocoa.com/tags/iOS/"/>
    
      <category term="Eventkit" scheme="http://code4cocoa.com/tags/Eventkit/"/>
    
  </entry>
  
  <entry>
    <title>OC中的泛型</title>
    <link href="http://code4cocoa.com/2016/04/19/OC%E4%B8%AD%E7%9A%84%E6%B3%9B%E5%9E%8B/"/>
    <id>http://code4cocoa.com/2016/04/19/OC中的泛型/</id>
    <published>2016-04-18T16:22:06.000Z</published>
    <updated>2016-04-18T16:26:09.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近在重构项目，决定将去年WWDC中讲到的OC新特性，泛型支持应用到项目中来。其实这是我一直很期待的一个特性，毕竟在做.Net的时候，泛型可是嚎嚎的好用。但是在此之前OC是不支持泛型的，那个时候使用NSArray等集合数据结构进行数据传递时，必须对业务有一定熟悉，或者变量命名相对规范些，不然很容易搞不清楚里面存储的是什么数据(Model)。</p>
<p>泛型示例如下：</p>
<script src="https://gist.github.com/yuxiangq/60e1e8d8d8c32734e5b2aa31d2166873.js"></script>


<p>这里要注意的是，编译器只会产生警告，不会报错，并且程序也是可编译通过运行的。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近在重构项目，决定将去年WWDC中讲到的OC新特性，泛型支持应用到项目中来。其实这是我一直很期待的一个特性，毕竟在做.Net的时候，泛型可是嚎嚎的好用。但是在此之前OC是不支持泛型的，那个时候使用NSArray等集合数据结构进行数据传递时，必须对业务有一定熟悉，或者变量命
    
    </summary>
    
    
      <category term="iOS" scheme="http://code4cocoa.com/tags/iOS/"/>
    
      <category term="Objective-C" scheme="http://code4cocoa.com/tags/Objective-C/"/>
    
  </entry>
  
  <entry>
    <title>蚂蚁金服技术开放日活动小记</title>
    <link href="http://code4cocoa.com/2016/03/13/%E8%9A%82%E8%9A%81%E9%87%91%E6%9C%8D%E6%8A%80%E6%9C%AF%E5%BC%80%E6%94%BE%E6%97%A5%E6%B4%BB%E5%8A%A8%E5%B0%8F%E8%AE%B0/"/>
    <id>http://code4cocoa.com/2016/03/13/蚂蚁金服技术开放日活动小记/</id>
    <published>2016-03-13T12:22:19.000Z</published>
    <updated>2016-03-13T12:23:49.000Z</updated>
    
    <content type="html"><![CDATA[<p>今天很开心的参加了蚂蚁金服技术开放日活动，非常感谢技术专家们的分享。这次活动的干货确实挺多的，在这里我简单总结下自己的收获。</p>
<p><strong>团队拥有统一的技能</strong></p>
<p>在团队建设方面，我受到的第一个启发就是让团队成员拥有统一的技能，这样能让整个团队变得更加高效。尤其是团队较小的时候，拥有更多的复合型人才，是团队的核心竞争力。这也是我后续团队建设工作中的重点。</p>
<p><strong>DTP模型</strong> </p>
<p>这是一个我在参加活动之前没有听过的名词，它表示分布式事务模型。分布式事务简单说来就是，跨越多个资源的保证数据一致性。</p>
<p>其中，X/Open DTP是X/Open这个组织定义的一套分布式事务的标准，也就是了定义了规范和API接口。</p>
<pre>
X/Open DTP 定义了三个组件： AP，TM，RM。
*AP(Application Programma)：应用程序，可以理解为使用DTP的程序。*
*RM(Resource Manager)：资源管理器，应用程序通过资源管理器对资源进行控制。*
*TM(Transaction Manager)：事务管理器，负责协调和管理事务，提供给AP应用程序编程接口以及管理资源管理器。* 
</pre>

<p><strong>最终一致性</strong></p>
<p>我们在处理分布式事务的时候，最重要的就是保证数据的一致性。但是有些时候，我们却不得不在一致性上做出妥协。当然，在一致性上进行妥协，并不是完全不管数据的一致性，否则数据是混乱的，所以我们要保证数据的最终一致性。</p>
<p><strong>蓝绿发布</strong></p>
<p>这个是我一致想在现有产品中做到的，但是在这之前不知道有这么一个专有名词。蓝绿发布的意义在于，整个发布过程中，用户不会感受到任何宕机或者服务重启。</p>
<p><strong>灰度发布</strong></p>
<p>灰度发布是指在黑与白之间，能够平滑过渡的一种发布方式。AB test就是一种灰度发布方式，让一部分用户继续用A，一部分用户开始用B，如果用户对B没有什么反对意见，那么逐步扩大范围，把所有用户都迁移到B上面来。灰度发布可以保证整体系统的稳定，在初始灰度的时候就可以发现、调整问题，以保证其影响度。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今天很开心的参加了蚂蚁金服技术开放日活动，非常感谢技术专家们的分享。这次活动的干货确实挺多的，在这里我简单总结下自己的收获。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;团队拥有统一的技能&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在团队建设方面，我受到的第一个启发就是让团队成员拥有统一的技能，这
    
    </summary>
    
    
      <category term="随笔" scheme="http://code4cocoa.com/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>FunnelChartView漏斗控件</title>
    <link href="http://code4cocoa.com/2016/03/05/FunnelChartView%E6%BC%8F%E6%96%97%E6%8E%A7%E4%BB%B6/"/>
    <id>http://code4cocoa.com/2016/03/05/FunnelChartView漏斗控件/</id>
    <published>2016-03-04T16:55:32.000Z</published>
    <updated>2017-02-17T15:53:37.000Z</updated>
    
    <content type="html"><![CDATA[<p>FunnelChartView是我为满足产品需求编写的一个简单的漏斗图表控件，主要用来展示销售漏斗，使用CoreGraphics绘制而成。</p>
<p>一直在纠结，这个控件的数据应当采用什么结构传才好。于是做了两个初始化接口：</p>
<ul>
<li>传一个FunnelChartModel列表。</li>
<li>传一个NSNumber列表，一个UIColor列表。</li>
</ul>
<p>个人感觉还是似有不妥，另外控件的整体效果还不够精致，还需要更多的打磨。</p>
<p>具体效果如果：<br><img src="https://raw.githubusercontent.com/yuxiangq/FunnelChartView/master/ScreenShots/Simulator%20Screen%20Shot%20Mar%203%2C%202016%2C%2022.50.16.png" alt=""></p>
<p>使用示例：</p>
<script src="https://gist.github.com/yuxiangq/2ff50e3cfd49c0568844.js"></script>


]]></content>
    
    <summary type="html">
    
      &lt;p&gt;FunnelChartView是我为满足产品需求编写的一个简单的漏斗图表控件，主要用来展示销售漏斗，使用CoreGraphics绘制而成。&lt;/p&gt;
&lt;p&gt;一直在纠结，这个控件的数据应当采用什么结构传才好。于是做了两个初始化接口：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;传一个Funnel
    
    </summary>
    
    
      <category term="iOS" scheme="http://code4cocoa.com/tags/iOS/"/>
    
      <category term="自定义控件" scheme="http://code4cocoa.com/tags/%E8%87%AA%E5%AE%9A%E4%B9%89%E6%8E%A7%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title>离职季感悟</title>
    <link href="http://code4cocoa.com/2016/02/26/%E7%A6%BB%E8%81%8C%E5%AD%A3%E6%84%9F%E6%82%9F/"/>
    <id>http://code4cocoa.com/2016/02/26/离职季感悟/</id>
    <published>2016-02-26T13:49:15.000Z</published>
    <updated>2016-02-26T13:53:40.000Z</updated>
    
    <content type="html"><![CDATA[<p>又到了一年一度的离职旺季，不幸的是我的项目组也有两位主力离职。作为他们的Leader，我虽然感到遗憾，但也挺他们感到高兴。遗憾的是，他们不能再陪着整个团队成长，同时因为他们的离开，我们产品这一两个月的研发进度也会受到影响。高兴的是，他们将去一个更高的平台磨练自己。</p>
<p>今天有个同事面试回来告诉我，面试官问的很多问题，他都没有料到，都比较底层。就我们的产品开发来说，几乎不会用到。他回顾了一下这两年在团队中的开发情况，自己一手做出来的产品，在技术上真没有什么可以骄傲的地方，大部分时间其实就是处理业务逻辑，可以看出他比较失落。我得承认，我们做得这个产品确实不够高大上，技术上可以说都是很成熟的技术，技术门槛低。回头整理自己的知识体系，我也发现在产品的某个时间点开始，我们更多的时间是在处理业务了，初期开荒阶段，各种技术尝试，封装常用库，架构等等。产品进入平稳期后，更多的业务需求占据了开发日程，留给尝试各种技术的空间慢慢变少，自然会觉得自己的技术好像在某个时间点有了停滞。</p>
<p>作为一名技术人，都梦想着自己能成为大牛，我也在向这这个方向努力。所以一直在尽量利用业余时间，尝试一些产品中没有使用的东西，或者新的技术。最近这段时间，自己也有迷惘，或许就是进入了瓶颈期。是的，每个IT人都会有瓶颈期，他们面对的方式也不一样。有得人在技术上遇到瓶颈期，于是就会选择转向别的方向，比如管理。有的人会慢慢的被磨掉耐心，怀疑自己的能力，从而变得平庸。有的人则会在某个时候，突破瓶颈，迎来技术的再一次快速提升。我是希望自己能迎来又一波技术的快速提升，从而实现自己做出一款牛B的梦想。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;又到了一年一度的离职旺季，不幸的是我的项目组也有两位主力离职。作为他们的Leader，我虽然感到遗憾，但也挺他们感到高兴。遗憾的是，他们不能再陪着整个团队成长，同时因为他们的离开，我们产品这一两个月的研发进度也会受到影响。高兴的是，他们将去一个更高的平台磨练自己。&lt;/p&gt;

    
    </summary>
    
    
      <category term="随笔" scheme="http://code4cocoa.com/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
</feed>
